# Generated by Django 4.1.10 on 2023-08-17 02:03

from django.db import migrations, models
import time
from geopy.geocoders import Nominatim
from simple_history.utils import bulk_update_with_history

region_country_dict = {
    'Anderson, AK, US': 'United States',
    'Koyuk, US': 'United States',
    'Afghanistan': 'Afghanistan',
    'Ethiopia': 'Ethiopia',
    'Tanzania': 'Tanzania',
    'Kenya': 'Kenya',
    'Uganda': 'Uganda',
    'Mozambique': 'Mozambique',
    'Madagascar': 'Madagascar',
    'Malawi': 'Malawi',
    'Zambia': 'Zambia',
    'Somalia': 'Somalia',
    'Zimbabwe': 'Zimbabwe',
    'Rwanda': 'Rwanda',
    'Burundi': 'Burundi',
    'South Sudan': 'South Sudan',
    'Eritrea': 'Eritrea',
    'Mauritius': 'Mauritius',
    'Djibouti': 'Djibouti',
    'Comoros': 'Comoros',
    'Seychelles': 'Seychelles',
    'DR Congo': 'Democratic Republic of the Congo',
    'Angola': 'Angola',
    'Cameroon': 'Cameroon',
    'Chad': 'Chad',
    'Congo': 'Democratic Republic of the Congo',
    'Central African Republic': 'Central African Republic',
    'Gabon': 'Gabon',
    'Equatorial Guinea': 'Equatorial Guinea',
    'Sao Tome & Principe': 'Brazil',
    'Algeria': 'Algeria',
    'Sudan': 'Sudan',
    'Morocco': 'Morocco',
    'Tunisia': 'Tunisia',
    'Libya': 'Libya',
    'Namibia': 'Namibia',
    'Botswana': 'Botswana',
    'Lesotho': 'Lesotho',
    'Eswatini': 'Eswatini',
    'Nigeria': 'Nigeria',
    'Ghana': 'Ghana',
    "Côte d'Ivoire": "Côte d'Ivoire",
    'Niger': 'Niger',
    'Burkina Faso': 'Burkina Faso',
    'Mali': 'Mali',
    'Senegal': 'Senegal',
    'Guinea': 'Guinea',
    'Benin': 'Benin',
    'Togo': 'Togo',
    'Sierra Leone': 'Sierra Leone',
    'Liberia': 'Liberia',
    'Mauritania': 'Mauritania',
    'Gambia': 'The Gambia',
    'Guinea-Bissau': 'Guinea-Bissau',
    'Cabo Verde': 'Cape Verde',
    'Manama, BH': 'Bahrain',
    'Alabama, US': 'United States',
    'Alaska, US': 'United States',
    'Albania': 'Albania',
    'Alberta, CA': 'Canada',
    'Argentina': 'Argentina',
    'Arizona, US': 'United States',
    'Arkansas, US': 'United States',
    'Armenia': 'Armenia',
    'Asia': 'Russia',
    'Africa': 'Chad',
    'Australia': 'Australia',
    'Australian Capital Territory, AU': 'Australia',
    'Austria': 'Austria',
    'Azerbaijan': 'Azerbaijan',
    'Bangladesh': 'Bangladesh',
    'Beijing, CN': 'China',
    'Belarus': 'Belarus',
    'Belgium': 'Belgium',
    'Bolivia': 'Bolivia',
    'Bosnia and Herzegovina': 'Bosnia and Herzegovina',
    'Brazil': 'Brazil',
    'British Columbia, CA': 'Canada',
    'Brunei Darussalam': 'Brunei',
    'Bulgaria': 'Bulgaria',
    'CA, US': 'United States',
    'Cambodia': 'Cambodia',
    'Canada': 'Canada',
    'Cape Town, ZA': 'South Africa',
    'Cardiff, GB': 'United Kingdom',
    'Central Asia': 'Kyrgyzstan',
    'Henan, CN': 'China',
    'Hubei, CN': 'China',
    'Hunan, CN': 'China',
    'Jiangxi, CN': 'China',
    'Chennai, IN': 'India',
    'Chile': 'Chile',
    'China': 'China',
    'Liaoning, CN': 'China',
    'Jilin, CN': 'China',
    'Heilongjiang, CN': 'China',
    'Shaanxi, CN': 'China',
    'Gansu, CN': 'China',
    'Qinghai, CN': 'China',
    'Ningxia Hui Autonomous Region, CN': 'China',
    'Xinjiang Uyghur Autonomous Region, CN': 'China',
    'Guangdong, CN': 'China',
    'Guangxi Zhuang Autonomous Region, CN': 'China',
    'Hainan, CN': 'China',
    'Hong Kong Special Administrative Region, CN': 'China',
    'Macau Special Administrative Region, CN': 'China',
    'Colombia': 'Colombia',
    'Colorado, US': 'United States',
    'Connecticut, US': 'United States',
    'Corscia, FR': 'France',
    'Corse-du-Sud, FR': 'France',
    'Costa Rica': 'Costa Rica',
    'Croatia': 'Croatia',
    'Cuba': 'Cuba',
    'Cyprus': 'Cyprus',
    'Czech Republic': 'Czechia',
    'Delaware, US': 'United States',
    'Denmark': 'Denmark',
    'District of Columbia, US': 'United States',
    'Dominican Republic': 'Dominican Republic',
    'Dubai, UAE': 'United Arab Emirates',
    'Dublin, IE': 'Ireland',
    'Texas, US': 'United States',
    'Shanghai, CN': 'China',
    'Jiangsu, CN': 'China',
    'Zhejiang, CN': 'China',
    'Anhui, CN': 'China',
    'Fujian, CN': 'China',
    'Hungary': 'Hungary',
    'Moldova': 'Moldova',
    'Poland': 'Poland',
    'Romania': 'Romania',
    'Slovakia': 'Slovakia',
    'Ukraine': 'Ukraine',
    'European Russia': 'Ukraine',
    'Iceland': 'Iceland',
    'Ecuador': 'Ecuador',
    'Eemshaven, NL': 'Netherlands',
    'Egypt': 'Egypt',
    'El Salvador': 'El Salvador',
    'Estonia': 'Estonia',
    'Europe': 'Germany',
    'Eurasia': 'Germany',
    'South America': 'Paraguay',
    'Republic of Cyprus': 'Cyprus',
    'Finland': 'Finland',
    'France': 'France',
    'Germany': 'Germany',
    'Greece': 'Greece',
    'Ireland': 'Ireland',
    'Italy': 'Italy',
    'Latvia': 'Latvia',
    'Lithuania': 'Lithuania',
    'Luxembourg': 'Luxembourg',
    'Malta': 'Malta',
    'Netherlands': 'Netherlands',
    'Portugal': 'Portugal',
    'Slovenia': 'Slovenia',
    'Spain': 'Spain',
    'Sweden': 'Sweden',
    'FL, US': 'United States',
    'Fiji': 'Fiji',
    'Frankfurt am Main, DE': 'Germany',
    'Hamina, FI': 'Finland',
    'French Guiana': 'France',
    'French Polynesia': 'France',
    'Georgia, GE': 'Georgia',
    'Georgia, US': 'United States',
    'Gibraltar': 'Gibraltar',
    'Gilroy, US': 'United States',
    'Global': 'Canada',
    'Guadeloupe': 'France',
    'Guatemala': 'Guatemala',
    'Hawaii, US': 'United States',
    'Oahu, US': 'United States',
    'Haiti': 'Haiti',
    'Honduras': 'Honduras',
    'Hong Kong, CN': 'China',
    'Idaho, US': 'United States',
    'Illinois, US': 'United States',
    'India': 'India',
    'Indiana, US': 'United States',
    'Indonesia': 'Indonesia',
    'Iowa, US': 'United States',
    'Islamic Republic of Iran': 'Iran',
    'Iraq': 'Iraq',
    'Israel': 'Israel',
    'Jakarta, ID': 'Indonesia',
    'Jamaica': 'Jamaica',
    'Japan': 'Japan',
    'Jawa Barat': 'Indonesia',
    'Jordan': 'Jordan',
    'Kansas, US': 'United States',
    'Kazakhstan': 'Kazakhstan',
    'Kentucky, US': 'United States',
    'South Korea': 'South Korea',
    'Kuwait': 'Kuwait',
    'Kyrgyzstan': 'Kyrgyzstan',
    'Laos': 'Laos',
    'Las Vegas, NV, US': 'United States',
    'Antigua and Barbuda': 'Antigua and Barbuda',
    'Bahamas': 'The Bahamas',
    'Barbados': 'Barbados',
    'Belize': 'Belize',
    'Dominica': 'Dominican Republic',
    'Grenada': 'Grenada',
    'Guyana': 'Guyana',
    'Mexico': 'Mexico',
    'Nicaragua': 'Nicaragua',
    'Panama': 'Panama',
    'Paraguay': 'Paraguay',
    'Peru': 'Peru',
    'Saint Kitts & Nevis': 'Saint Kitts and Nevis',
    'Saint Lucia': 'Saint Lucia',
    'St. Vincent & Grenadines': 'Saint Vincent and the Grenadines',
    'Suriname': 'Suriname',
    'Trinidad and Tobago': 'Trinidad and Tobago',
    'Uruguay': 'Uruguay',
    'Venezuela': 'Venezuela',
    'London, GB': 'United Kingdom',
    'Los Angeles, US': 'United States',
    'Louisiana, US': 'United States',
    'Luzon, PH': 'Philippines',
    'Visayas, PH': 'Philippines',
    'Wisconsin, US': 'United States',
    'North Dakota, US': 'United States',
    'South Dakota, US': 'United States',
    'Nebraska, US': 'United States',
    'Minnesota, US': 'United States',
    'Minneapolis, US': 'United States',
    'Macao': 'China',
    'North Macedonia': 'North Macedonia',
    'Maine, US': 'United States',
    'Malaysia': 'Malaysia',
    'Maldives': 'Maldives',
    'Manitoba, CA': 'Canada',
    'Martinique': 'France',
    'Maryland, US': 'United States',
    'Massachusetts, US': 'United States',
    'Mayotte': 'France',
    'Michigan, US': 'United States',
    'Middenmeer, NL': 'Netherlands',
    'Turkey': 'Turkey',
    'Syria': 'Syria',
    'Iran': 'Iran',
    'Saudi Arabia': 'Saudi Arabia',
    'Oman': 'Oman',
    'Yemen': 'Yemen',
    'UAE': 'United Arab Emirates',
    'Milano, IT': 'Italy',
    'Mindanao, PH': 'Philippines',
    'Mississippi, US': 'United States',
    'Missouri, US': 'United States',
    'Mongolia': 'Mongolia',
    'Montana, US': 'United States',
    'Montenegro': 'Montenegro',
    'Montreal, CA': 'Canada',
    'Mumbai, IN': 'India',
    'Myanmar': 'Myanmar',
    'Long Island, US': 'United States',
    'New York, US': 'United States',
    'New England, US': 'United States',
    'Albany, US': 'United States',
    'Utica, US': 'United States',
    'Binghamton, US': 'United States',
    'Syracuse, US': 'United States',
    'Rochester, US': 'United States',
    'Buffalo, US': 'United States',
    'Nepal': 'Nepal',
    'Nevada, US': 'United States',
    'New Brunswick, CA': 'Canada',
    'New Hampshire, US': 'United States',
    'New Jersey, US': 'United States',
    'New Mexico, US': 'United States',
    'New South Wales, AU': 'Australia',
    'New Zealand': 'New Zealand',
    'Newfoundland and Labrador, CA': 'Canada',
    'Greenland': 'Greenland',
    'Saint Kitts and Nevis': 'Saint Kitts and Nevis',
    'Saint Vincent and the Grenadines': 'Saint Vincent and the Grenadines',
    'United States': 'United States',
    'North Carolina, US': 'United States',
    'Shanxi, CN': 'China',
    'Hebei, CN': 'China',
    'Tianjin, CN': 'China',
    'Shandong, CN': 'China',
    'Northern Territory, AU': 'Australia',
    'Northwest Territories, CA': 'Canada',
    'Norway': 'Norway',
    'Nova Scotia, CA': 'Canada',
    'Nunavut, CA': 'Canada',
    'Ohio, US': 'United States',
    'Oklahoma, US': 'United States',
    'Ontario, CA': 'Canada',
    'Oregon, US': 'United States',
    'Osaka, JP': 'Japan',
    'Oslo': 'Norway',
    'Pakistan': 'Pakistan',
    'Paris, FR': 'France',
    'Kuala Lipis, MY': 'Malaysia',
    'Pennsylvania, US': 'United States',
    'Philippines': 'Philippines',
    'Prince Edward Island, CA': 'Canada',
    'Puerto Rico, US': 'United States',
    'Pune, IN': 'India',
    'Qatar': 'Qatar',
    'Quebec, CA': 'Canada',
    'Queensland, AU': 'Australia',
    'West Virginia, US': 'United States',
    'Reunion': 'France',
    'Rhode Island, US': 'United States',
    'Russian Federation': 'Russia',
    'Tennessee, US': 'United States',
    'Virginia, US': 'United States',
    'South Carolina, US': 'United States',
    'Panhandle, US': 'United States',
    'Sabah, Malaysia': 'Malaysia',
    'Saint Barthélemy': 'France',
    'Saint Martin': 'France',
    'Saint Pierre and Miquelon': 'France',
    'Saint-Ghislain, BE': 'Belgium',
    'Salt Lake City, US': 'United States',
    'Sarawak, Malaysia': 'Malaysia',
    'Saskatchewan, CA': 'Canada',
    'Seoul, KR': 'South Korea',
    'Serbia': 'Serbia',
    'Singapore': 'Singapore',
    'South Africa': 'South Africa',
    'South Australia, AU': 'Australia',
    'Sri Lanka': 'Sri Lanka',
    'Stockholm, SE': 'Sweden',
    'Switzerland': 'Switzerland',
    'Sydney, AU': 'Australia',
    'São Paulo, BR': 'Brazil',
    "Tahiti Fa'a'à, PF": 'France',
    'Taipei, Taiwan': 'Taiwan',
    'Taiwan': 'Taiwan',
    'Tajikistan': 'Tajikistan',
    'Tasmania, AU': 'Australia',
    'Thailand': 'Thailand',
    'Tokyo, JP': 'Japan',
    'Turkmenistan': 'Turkmenistan',
    'United Arab Emirates': 'United Arab Emirates',
    'United Kingdom': 'United Kingdom',
    'Utah, US': 'United States',
    'Uzbekistan': 'Uzbekistan',
    'Vermont, US': 'United States',
    'Victoria, AU': 'Australia',
    'Vietnam': 'Vietnam',
    'WA, US': 'United States',
    'Wyoming, US': 'United States',
    'Wellington, NZ': 'New Zealand',
    'Pilbara, AU': 'Australia',
    'Perth, AU': 'Australia',
    'Western Australia, AU': 'Australia',
    'Yukon, CA': 'Canada',
    'Zurich, CH': 'Switzerland',
    'Bahrain': 'Bahrain',
    'Canberra, AU': 'Australia',
    'Delhi, IN': 'India',
    'Dubai, AE': 'United Arab Emirates',
    'Gävle, SE': 'Sweden',
    'Heriotdale, ZA': 'South Africa',
    'Johannesburg, ZA': 'South Africa',
    'Melbourne, AU': 'Australia',
    'Oslo, NO': 'Norway',
    'Puerto Rico': 'United States',
    'La Réunion': 'France',
    'Saitama, JP': 'Japan',
    'Toronto, CA': 'Canada',
    'Warszawa, PL': 'Poland',
    'Oceania': 'Oceania',
    'Antarctica': 'Antarctica',
}


def insert_region_country(apps, schema_editor):
    # geolocator = Nominatim(user_agent="PTS_GRN_GEOCODE_MIGRATION")

    RegionGeocode = apps.get_model('explorers', 'RegionGeocode')
    initial_region_list = list(region_country_dict.keys())

    # Codes below are no longer needed to avoid calling Geolocation API
    # new_regions = RegionGeocode.objects.exclude(region__in=initial_region_list)
    # for new_region in new_regions:
    #     point = (new_region.latitude, new_region.longitude)
    #     reversed_location = geolocator.reverse(point, language='en')
    #     if reversed_location:
    #         country = reversed_location.raw['address']['country']
    #         region_country_dict[new_region.region] = country
    #     # Required delay based on Nominatim's policy
    #     time.sleep(1)

    full_region_list = list(region_country_dict.keys())
    region_objs = RegionGeocode.objects.filter(region__in=full_region_list)

    for region_obj in region_objs:
        region = region_obj.region
        region_obj.country = region_country_dict[region]
    RegionGeocode.objects.bulk_update(region_objs, ['country'])

    assert not RegionGeocode.objects.exclude(
        region__in=initial_region_list).exists()


class Migration(migrations.Migration):

    dependencies = [
        ('explorers', '0005_climatiqversion'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicalregiongeocode',
            name='country',
            field=models.CharField(
                blank=True, help_text='Country of the region. May be the same as region.', max_length=256),
        ),
        migrations.AddField(
            model_name='regiongeocode',
            name='country',
            field=models.CharField(
                blank=True, help_text='Country of the region. May be the same as region.', max_length=256),
        ),
        migrations.AlterField(
            model_name='historicalregiongeocode',
            name='region',
            field=models.CharField(
                help_text="Regions used in 'Region Configuration' table allowlist.", max_length=256),
        ),
        migrations.AlterField(
            model_name='regiongeocode',
            name='region',
            field=models.CharField(
                help_text="Regions used in 'Region Configuration' table allowlist.", max_length=256),
        ),
        migrations.RunPython(insert_region_country,
                             migrations.RunPython.noop),
    ]
